from random import choice

from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from utils.routers import users_router
import keyboards as keys
from config import ADMINS
from states import User
from loader import base
from utils.ai_core import ai_recipe


@users_router.callback_query(F.data == 'start')
async def after_sub_check(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω, —Ç–æ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
                                  reply_markup=await keys.main_menu(callback.from_user.id in ADMINS))


@users_router.message(Command('start'))
async def strat_func(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
                     # –ï—Å–ª–∏ –∞–¥–º–∏–Ω, —Ç–æ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
                     reply_markup=await keys.main_menu(msg.from_user.id in ADMINS))


@users_router.message(F.text == 'üç≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç')
async def random_recipe(msg: Message, state: FSMContext):
    await state.set_state(User.random)
    await msg.answer('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–ª–∏ –ø–æ –∏–º–µ—é—â–∏–º—Å—è –ø—Ä–æ–¥—É–∫—Ç–∞–º?', reply_markup=keys.recipe_choice)


@users_router.message(F.text == 'üìñ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏')
async def category_menu(msg: Message):
    await msg.answer('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keys.categories)


@users_router.message(F.text == '‚¨Ö –ù–∞–∑–∞–¥')
async def back(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer('–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
                     # –ï—Å–ª–∏ –∞–¥–º–∏–Ω, —Ç–æ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
                     reply_markup=await keys.main_menu(msg.from_user.id in ADMINS))


@users_router.callback_query(F.data.startswith('get_'))
async def show_redy_recipe(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    recipe = await base.get_recipe_by_id(callback.data.removeprefix('get_'))
    recipe_button = await keys.recipe_url(recipe['recipe_url']) if recipe['recipe_url'] != 'empty' else None

    await callback.message.answer(f'*_–†–µ—Ü–µ–ø—Ç "{recipe["recipe_name"]}_*"\n\n{recipe["recipe_content"]}',
                                  reply_markup=recipe_button, parse_mode='MarkdownV2')


@users_router.callback_query(User.random, F.data == 'ready_recipe')
async def get_random_ready_recipe(callback: CallbackQuery, state: FSMContext):
    """–î–æ—Å—Ç–∞–µ–º –ª—é–±–æ–π –≥–æ—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç"""
    await state.clear()
    await callback.answer()
    try:
        random_ready_recipe = choice(await base.get_all_recipe())
        msg_text = f'*_–†–µ—Ü–µ–ø—Ç "{random_ready_recipe["recipe_name"]}":_*\n\n{random_ready_recipe["recipe_content"]}'

        recipe_button = await keys.recipe_url(random_ready_recipe['recipe_url']) \
            if random_ready_recipe['recipe_url'] != 'empty' else None

        await callback.message.answer(msg_text, reply_markup=recipe_button, parse_mode='MarkdownV2')
    except IndexError:
        await callback.message.answer('–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ—Ç')


@users_router.callback_query(User.random, F.data == 'input')
async def get_random_input_recipe(callback: CallbackQuery):
    """–ü—Ä–æ—Å–∏–º –ò–ò –¥–∞—Ç—å –Ω–∞–º –ª—é–±–æ–π —Ä–µ—Ü–µ–ø—Ç"""
    await callback.message.delete()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è —É –≤–∞—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', reply_markup=keys.cancel)


@users_router.message(User.random, F.text != '–û—Ç–º–µ–Ω–∞')
async def get_random_input_recipe(msg: Message, state: FSMContext):
    await state.clear()
    msg_for_del = await msg.answer('üîç –ò—â—é –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ—Ü–µ–ø—Ç...')
    ai_answer = await ai_recipe(f'–í–æ—Ç –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É –º–µ–Ω—è –µ—Å—Ç—å: {msg.text}. –ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?')
    await msg_for_del.delete()
    await msg.answer(ai_answer, reply_markup=await keys.main_menu(msg.from_user.id in ADMINS))


@users_router.message(F.text.in_(['ü•ó –°–∞–ª–∞—Ç—ã', 'üçñ –ú—è—Å–Ω—ã–µ –±–ª—é–¥–∞', 'üç∞ –î–µ—Å–µ—Ä—Ç—ã']))
async def salad_category(msg: Message, state: FSMContext):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–∞–ª–∞—Ç–æ–≤"""
    category_dict = {
        'ü•ó –°–∞–ª–∞—Ç—ã': User.salads,
        'üçñ –ú—è—Å–Ω—ã–µ –±–ª—é–¥–∞': User.meat,
        'üç∞ –î–µ—Å–µ—Ä—Ç—ã': User.desserts,
    }
    await state.set_state(category_dict[msg.text])
    await msg.answer('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–ª–∏ –ø–æ –∏–º–µ—é—â–∏–º—Å—è –ø—Ä–æ–¥—É–∫—Ç–∞–º?', reply_markup=keys.recipe_choice)


@users_router.callback_query(User.salads, F.data == 'ready_recipe')
@users_router.callback_query(User.meat, F.data == 'ready_recipe')
@users_router.callback_query(User.desserts, F.data == 'ready_recipe')
async def get_ready_recipe_by_category(callback: CallbackQuery, state: FSMContext):
    """–í—ã–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    category = ((await state.get_state()).split(':'))[1]
    category_recipe_list = await base.get_recipe_by_category(category)
    if len(category_recipe_list) > 0:
        await callback.message.edit_text('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤:',
                                         reply_markup=await keys.recipe_list_keyboard(category_recipe_list))
    else:
        await callback.message.answer('–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ—Ç')


@users_router.callback_query(User.salads, F.data == 'input')
@users_router.callback_query(User.meat, F.data == 'input')
@users_router.callback_query(User.desserts, F.data == 'input')
async def get_ready_recipe_by_category(callback: CallbackQuery):
    """–í—ã–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    await callback.message.delete()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è —É –≤–∞—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', reply_markup=keys.cancel)


@users_router.message(User.salads, F.text != '–û—Ç–º–µ–Ω–∞')
@users_router.message(User.meat, F.text != '–û—Ç–º–µ–Ω–∞')
@users_router.message(User.desserts, F.text != '–û—Ç–º–µ–Ω–∞')
async def get_ready_recipe_by_category(msg: Message, state: FSMContext):
    text_for_prompt_dict = {
        'salads': '–ö–∞–∫–æ–π —Å–∞–ª–∞—Ç —è –º–æ–≥—É –∏–∑ —ç—Ç–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?',
        'meat': '–ö–∞–∫–æ–µ –º—è—Å–Ω–æ–µ –±–ª—é–¥–æ —è –º–æ–≥—É –∏–∑ —ç—Ç–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?',
        'desserts': '–ö–∞–∫–æ–π –¥–µ—Å–µ—Ä—Ç —è –º–æ–≥—É –∏–∑ —ç—Ç–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?',
    }
    category = ((await state.get_state()).split(':'))[1]
    msg_for_del = await msg.answer('üîç –ò—â—é –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ—Ü–µ–ø—Ç...')
    ai_answer = await ai_recipe(f'–í–æ—Ç –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É –º–µ–Ω—è –µ—Å—Ç—å: {msg.text}. {text_for_prompt_dict[category]}')
    await msg_for_del.delete()
    await msg.answer(ai_answer, reply_markup=keys.categories)
    await state.clear()


@users_router.message(F.text == '–û—Ç–º–µ–Ω–∞')
async def cancel_func(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                     # –ï—Å–ª–∏ –∞–¥–º–∏–Ω, —Ç–æ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
                     reply_markup=await keys.main_menu(msg.from_user.id in ADMINS))
