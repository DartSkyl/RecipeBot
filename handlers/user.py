from random import choice

from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types.chat_member_left import ChatMemberLeft
from aiogram.exceptions import TelegramBadRequest

from utils.routers import users_router
import keyboards as keys
from config import MAIN_CHANNEL, ADMINS
from states import User
from loader import base
from utils.ai_core import ai_recipe


@users_router.message(Command('start'))
async def strat_func(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
                     # –ï—Å–ª–∏ –∞–¥–º–∏–Ω, —Ç–æ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
                     reply_markup=await keys.main_menu(msg.from_user.id in ADMINS))


@users_router.message(F.text == 'üç≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç')
async def random_recipe(msg: Message, state: FSMContext):
    await state.set_state(User.random)
    await msg.answer('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–ª–∏ –ø–æ –∏–º–µ—é—â–∏–º—Å—è –ø—Ä–æ–¥—É–∫—Ç–∞–º?', reply_markup=keys.recipe_choice)


@users_router.message(F.text == 'üìñ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏')
async def category_menu(msg: Message):
    await msg.answer('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keys.categories)


@users_router.message(F.text == '‚¨Ö –ù–∞–∑–∞–¥')
async def back(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer('–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
                     # –ï—Å–ª–∏ –∞–¥–º–∏–Ω, —Ç–æ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
                     reply_markup=await keys.main_menu(msg.from_user.id in ADMINS))


@users_router.callback_query(User.random, F.data == 'ready_recipe')
async def get_random_ready_recipe(callback: CallbackQuery, state: FSMContext):
    """–î–æ—Å—Ç–∞–µ–º –ª—é–±–æ–π –≥–æ—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç"""
    await state.clear()
    await callback.answer()
    random_ready_recipe = choice(await base.get_all_recipe())
    msg_text = f'*_–†–µ—Ü–µ–ø—Ç "{random_ready_recipe["recipe_name"]}":_*\n\n{random_ready_recipe["recipe_content"]}'

    recipe_button = await keys.recipe_url(random_ready_recipe['recipe_url']) \
        if random_ready_recipe['recipe_url'] != 'empty' else None

    await callback.message.answer(msg_text, reply_markup=recipe_button, parse_mode='MarkdownV2')


@users_router.callback_query(User.random, F.data == 'input')
async def get_random_input_recipe(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –ò–ò –¥–∞—Ç—å –Ω–∞–º –ª—é–±–æ–π —Ä–µ—Ü–µ–ø—Ç"""
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è —É –≤–∞—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤:')


@users_router.message(User.random, F.text != '–û—Ç–º–µ–Ω–∞')
async def get_random_input_recipe(msg: Message, state: FSMContext):
    await state.clear()
    ai_answer = await ai_recipe(f'–í–æ—Ç –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É –º–µ–Ω—è –µ—Å—Ç—å: {msg.text}. –ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?')
    await msg.answer(ai_answer)
